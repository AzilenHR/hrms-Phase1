/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.EmployeeType;
import com.hrms.model.EmployeeTypeModel;
import com.hrms.model.EmployeeTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeType service. Represents a row in the &quot;HRMS_EmployeeType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.EmployeeTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeTypeImpl}.
 * </p>
 *
 * @author bhavik
 * @see EmployeeTypeImpl
 * @see com.hrms.model.EmployeeType
 * @see com.hrms.model.EmployeeTypeModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeTypeModelImpl extends BaseModelImpl<EmployeeType>
	implements EmployeeTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee type model instance should use the {@link com.hrms.model.EmployeeType} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_EmployeeType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "employeeTypeId", Types.BIGINT },
			{ "employeeTypeName", Types.VARCHAR },
			{ "status", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_EmployeeType (employeeTypeId LONG not null primary key,employeeTypeName VARCHAR(75) null,status BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_EmployeeType";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeType.employeeTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_EmployeeType.employeeTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.EmployeeType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.EmployeeType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeType toModel(EmployeeTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeType model = new EmployeeTypeImpl();

		model.setEmployeeTypeId(soapModel.getEmployeeTypeId());
		model.setEmployeeTypeName(soapModel.getEmployeeTypeName());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeType> toModels(EmployeeTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeType> models = new ArrayList<EmployeeType>(soapModels.length);

		for (EmployeeTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.EmployeeType"));

	public EmployeeTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeType.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("employeeTypeId", getEmployeeTypeId());
		attributes.put("employeeTypeName", getEmployeeTypeName());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long employeeTypeId = (Long)attributes.get("employeeTypeId");

		if (employeeTypeId != null) {
			setEmployeeTypeId(employeeTypeId);
		}

		String employeeTypeName = (String)attributes.get("employeeTypeName");

		if (employeeTypeName != null) {
			setEmployeeTypeName(employeeTypeName);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getEmployeeTypeId() {
		return _employeeTypeId;
	}

	@Override
	public void setEmployeeTypeId(long employeeTypeId) {
		_employeeTypeId = employeeTypeId;
	}

	@JSON
	@Override
	public String getEmployeeTypeName() {
		if (_employeeTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _employeeTypeName;
		}
	}

	@Override
	public void setEmployeeTypeName(String employeeTypeName) {
		_employeeTypeName = employeeTypeName;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmployeeType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeTypeImpl employeeTypeImpl = new EmployeeTypeImpl();

		employeeTypeImpl.setEmployeeTypeId(getEmployeeTypeId());
		employeeTypeImpl.setEmployeeTypeName(getEmployeeTypeName());
		employeeTypeImpl.setStatus(getStatus());

		employeeTypeImpl.resetOriginalValues();

		return employeeTypeImpl;
	}

	@Override
	public int compareTo(EmployeeType employeeType) {
		long primaryKey = employeeType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeType)) {
			return false;
		}

		EmployeeType employeeType = (EmployeeType)obj;

		long primaryKey = employeeType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EmployeeType> toCacheModel() {
		EmployeeTypeCacheModel employeeTypeCacheModel = new EmployeeTypeCacheModel();

		employeeTypeCacheModel.employeeTypeId = getEmployeeTypeId();

		employeeTypeCacheModel.employeeTypeName = getEmployeeTypeName();

		String employeeTypeName = employeeTypeCacheModel.employeeTypeName;

		if ((employeeTypeName != null) && (employeeTypeName.length() == 0)) {
			employeeTypeCacheModel.employeeTypeName = null;
		}

		employeeTypeCacheModel.status = getStatus();

		return employeeTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{employeeTypeId=");
		sb.append(getEmployeeTypeId());
		sb.append(", employeeTypeName=");
		sb.append(getEmployeeTypeName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.EmployeeType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>employeeTypeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeTypeName</column-name><column-value><![CDATA[");
		sb.append(getEmployeeTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmployeeType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeType.class
		};
	private long _employeeTypeId;
	private String _employeeTypeName;
	private boolean _status;
	private EmployeeType _escapedModel;
}