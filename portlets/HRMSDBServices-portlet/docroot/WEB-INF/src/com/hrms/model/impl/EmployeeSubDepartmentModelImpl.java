/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.EmployeeSubDepartment;
import com.hrms.model.EmployeeSubDepartmentModel;
import com.hrms.model.EmployeeSubDepartmentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeSubDepartment service. Represents a row in the &quot;HRMS_EmployeeSubDepartment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.EmployeeSubDepartmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeSubDepartmentImpl}.
 * </p>
 *
 * @author yashpalsinh
 * @see EmployeeSubDepartmentImpl
 * @see com.hrms.model.EmployeeSubDepartment
 * @see com.hrms.model.EmployeeSubDepartmentModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeSubDepartmentModelImpl extends BaseModelImpl<EmployeeSubDepartment>
	implements EmployeeSubDepartmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee sub department model instance should use the {@link com.hrms.model.EmployeeSubDepartment} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_EmployeeSubDepartment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "employeeSubDepartmentId", Types.BIGINT },
			{ "subDepartmentName", Types.VARCHAR },
			{ "employeeDepartmentId", Types.BIGINT },
			{ "status", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_EmployeeSubDepartment (employeeSubDepartmentId LONG not null primary key,subDepartmentName VARCHAR(75) null,employeeDepartmentId LONG,status BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_EmployeeSubDepartment";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeSubDepartment.employeeSubDepartmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_EmployeeSubDepartment.employeeSubDepartmentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.EmployeeSubDepartment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.EmployeeSubDepartment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.hrms.model.EmployeeSubDepartment"),
			true);
	public static long EMPLOYEEDEPARTMENTID_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long EMPLOYEESUBDEPARTMENTID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeSubDepartment toModel(
		EmployeeSubDepartmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeSubDepartment model = new EmployeeSubDepartmentImpl();

		model.setEmployeeSubDepartmentId(soapModel.getEmployeeSubDepartmentId());
		model.setSubDepartmentName(soapModel.getSubDepartmentName());
		model.setEmployeeDepartmentId(soapModel.getEmployeeDepartmentId());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeSubDepartment> toModels(
		EmployeeSubDepartmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeSubDepartment> models = new ArrayList<EmployeeSubDepartment>(soapModels.length);

		for (EmployeeSubDepartmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.EmployeeSubDepartment"));

	public EmployeeSubDepartmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeSubDepartmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeSubDepartmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeSubDepartmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeSubDepartment.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeSubDepartment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("employeeSubDepartmentId", getEmployeeSubDepartmentId());
		attributes.put("subDepartmentName", getSubDepartmentName());
		attributes.put("employeeDepartmentId", getEmployeeDepartmentId());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long employeeSubDepartmentId = (Long)attributes.get(
				"employeeSubDepartmentId");

		if (employeeSubDepartmentId != null) {
			setEmployeeSubDepartmentId(employeeSubDepartmentId);
		}

		String subDepartmentName = (String)attributes.get("subDepartmentName");

		if (subDepartmentName != null) {
			setSubDepartmentName(subDepartmentName);
		}

		Long employeeDepartmentId = (Long)attributes.get("employeeDepartmentId");

		if (employeeDepartmentId != null) {
			setEmployeeDepartmentId(employeeDepartmentId);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getEmployeeSubDepartmentId() {
		return _employeeSubDepartmentId;
	}

	@Override
	public void setEmployeeSubDepartmentId(long employeeSubDepartmentId) {
		_employeeSubDepartmentId = employeeSubDepartmentId;
	}

	@JSON
	@Override
	public String getSubDepartmentName() {
		if (_subDepartmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _subDepartmentName;
		}
	}

	@Override
	public void setSubDepartmentName(String subDepartmentName) {
		_subDepartmentName = subDepartmentName;
	}

	@JSON
	@Override
	public long getEmployeeDepartmentId() {
		return _employeeDepartmentId;
	}

	@Override
	public void setEmployeeDepartmentId(long employeeDepartmentId) {
		_columnBitmask |= EMPLOYEEDEPARTMENTID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeDepartmentId) {
			_setOriginalEmployeeDepartmentId = true;

			_originalEmployeeDepartmentId = _employeeDepartmentId;
		}

		_employeeDepartmentId = employeeDepartmentId;
	}

	public long getOriginalEmployeeDepartmentId() {
		return _originalEmployeeDepartmentId;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public boolean getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmployeeSubDepartment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeSubDepartment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeSubDepartment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeSubDepartmentImpl employeeSubDepartmentImpl = new EmployeeSubDepartmentImpl();

		employeeSubDepartmentImpl.setEmployeeSubDepartmentId(getEmployeeSubDepartmentId());
		employeeSubDepartmentImpl.setSubDepartmentName(getSubDepartmentName());
		employeeSubDepartmentImpl.setEmployeeDepartmentId(getEmployeeDepartmentId());
		employeeSubDepartmentImpl.setStatus(getStatus());

		employeeSubDepartmentImpl.resetOriginalValues();

		return employeeSubDepartmentImpl;
	}

	@Override
	public int compareTo(EmployeeSubDepartment employeeSubDepartment) {
		long primaryKey = employeeSubDepartment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeSubDepartment)) {
			return false;
		}

		EmployeeSubDepartment employeeSubDepartment = (EmployeeSubDepartment)obj;

		long primaryKey = employeeSubDepartment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmployeeSubDepartmentModelImpl employeeSubDepartmentModelImpl = this;

		employeeSubDepartmentModelImpl._originalEmployeeDepartmentId = employeeSubDepartmentModelImpl._employeeDepartmentId;

		employeeSubDepartmentModelImpl._setOriginalEmployeeDepartmentId = false;

		employeeSubDepartmentModelImpl._originalStatus = employeeSubDepartmentModelImpl._status;

		employeeSubDepartmentModelImpl._setOriginalStatus = false;

		employeeSubDepartmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeSubDepartment> toCacheModel() {
		EmployeeSubDepartmentCacheModel employeeSubDepartmentCacheModel = new EmployeeSubDepartmentCacheModel();

		employeeSubDepartmentCacheModel.employeeSubDepartmentId = getEmployeeSubDepartmentId();

		employeeSubDepartmentCacheModel.subDepartmentName = getSubDepartmentName();

		String subDepartmentName = employeeSubDepartmentCacheModel.subDepartmentName;

		if ((subDepartmentName != null) && (subDepartmentName.length() == 0)) {
			employeeSubDepartmentCacheModel.subDepartmentName = null;
		}

		employeeSubDepartmentCacheModel.employeeDepartmentId = getEmployeeDepartmentId();

		employeeSubDepartmentCacheModel.status = getStatus();

		return employeeSubDepartmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{employeeSubDepartmentId=");
		sb.append(getEmployeeSubDepartmentId());
		sb.append(", subDepartmentName=");
		sb.append(getSubDepartmentName());
		sb.append(", employeeDepartmentId=");
		sb.append(getEmployeeDepartmentId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.EmployeeSubDepartment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>employeeSubDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeSubDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subDepartmentName</column-name><column-value><![CDATA[");
		sb.append(getSubDepartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmployeeSubDepartment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeSubDepartment.class
		};
	private long _employeeSubDepartmentId;
	private String _subDepartmentName;
	private long _employeeDepartmentId;
	private long _originalEmployeeDepartmentId;
	private boolean _setOriginalEmployeeDepartmentId;
	private boolean _status;
	private boolean _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private EmployeeSubDepartment _escapedModel;
}