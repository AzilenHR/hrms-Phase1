/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.EmployeeMst;
import com.hrms.model.EmployeeMstModel;
import com.hrms.model.EmployeeMstSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeMst service. Represents a row in the &quot;HRMS_EmployeeMst&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.EmployeeMstModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeMstImpl}.
 * </p>
 *
 * @author bhavik
 * @see EmployeeMstImpl
 * @see com.hrms.model.EmployeeMst
 * @see com.hrms.model.EmployeeMstModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeMstModelImpl extends BaseModelImpl<EmployeeMst>
	implements EmployeeMstModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee mst model instance should use the {@link com.hrms.model.EmployeeMst} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_EmployeeMst";
	public static final Object[][] TABLE_COLUMNS = {
			{ "employeeMstId", Types.BIGINT },
			{ "employeeId", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "gender", Types.BIGINT },
			{ "dateOfBirth", Types.TIMESTAMP },
			{ "joiningDate", Types.TIMESTAMP },
			{ "leavingDate", Types.TIMESTAMP },
			{ "maritualStatus", Types.INTEGER },
			{ "nationality", Types.VARCHAR },
			{ "employeeDesignationId", Types.INTEGER },
			{ "employeeDepartmentId", Types.INTEGER },
			{ "employeeSubDepartmentId", Types.INTEGER },
			{ "employeeTypeId", Types.INTEGER },
			{ "employeeProofId", Types.INTEGER },
			{ "createBy", Types.INTEGER },
			{ "modifiedBy", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_EmployeeMst (employeeMstId LONG not null primary key,employeeId VARCHAR(75) null,userId LONG,gender LONG,dateOfBirth DATE null,joiningDate DATE null,leavingDate DATE null,maritualStatus INTEGER,nationality VARCHAR(75) null,employeeDesignationId INTEGER,employeeDepartmentId INTEGER,employeeSubDepartmentId INTEGER,employeeTypeId INTEGER,employeeProofId INTEGER,createBy INTEGER,modifiedBy INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_EmployeeMst";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeMst.employeeMstId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_EmployeeMst.employeeMstId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.EmployeeMst"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.EmployeeMst"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.hrms.model.EmployeeMst"),
			true);
	public static long CREATEBY_COLUMN_BITMASK = 1L;
	public static long MODIFIEDBY_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long EMPLOYEEMSTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeMst toModel(EmployeeMstSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeMst model = new EmployeeMstImpl();

		model.setEmployeeMstId(soapModel.getEmployeeMstId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setUserId(soapModel.getUserId());
		model.setGender(soapModel.getGender());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setJoiningDate(soapModel.getJoiningDate());
		model.setLeavingDate(soapModel.getLeavingDate());
		model.setMaritualStatus(soapModel.getMaritualStatus());
		model.setNationality(soapModel.getNationality());
		model.setEmployeeDesignationId(soapModel.getEmployeeDesignationId());
		model.setEmployeeDepartmentId(soapModel.getEmployeeDepartmentId());
		model.setEmployeeSubDepartmentId(soapModel.getEmployeeSubDepartmentId());
		model.setEmployeeTypeId(soapModel.getEmployeeTypeId());
		model.setEmployeeProofId(soapModel.getEmployeeProofId());
		model.setCreateBy(soapModel.getCreateBy());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeMst> toModels(EmployeeMstSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeMst> models = new ArrayList<EmployeeMst>(soapModels.length);

		for (EmployeeMstSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.EmployeeMst"));

	public EmployeeMstModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeMstId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeMstId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeMstId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeMst.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeMst.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("employeeMstId", getEmployeeMstId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("userId", getUserId());
		attributes.put("gender", getGender());
		attributes.put("dateOfBirth", getDateOfBirth());
		attributes.put("joiningDate", getJoiningDate());
		attributes.put("leavingDate", getLeavingDate());
		attributes.put("maritualStatus", getMaritualStatus());
		attributes.put("nationality", getNationality());
		attributes.put("employeeDesignationId", getEmployeeDesignationId());
		attributes.put("employeeDepartmentId", getEmployeeDepartmentId());
		attributes.put("employeeSubDepartmentId", getEmployeeSubDepartmentId());
		attributes.put("employeeTypeId", getEmployeeTypeId());
		attributes.put("employeeProofId", getEmployeeProofId());
		attributes.put("createBy", getCreateBy());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long employeeMstId = (Long)attributes.get("employeeMstId");

		if (employeeMstId != null) {
			setEmployeeMstId(employeeMstId);
		}

		String employeeId = (String)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long gender = (Long)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}

		Date joiningDate = (Date)attributes.get("joiningDate");

		if (joiningDate != null) {
			setJoiningDate(joiningDate);
		}

		Date leavingDate = (Date)attributes.get("leavingDate");

		if (leavingDate != null) {
			setLeavingDate(leavingDate);
		}

		Integer maritualStatus = (Integer)attributes.get("maritualStatus");

		if (maritualStatus != null) {
			setMaritualStatus(maritualStatus);
		}

		String nationality = (String)attributes.get("nationality");

		if (nationality != null) {
			setNationality(nationality);
		}

		Integer employeeDesignationId = (Integer)attributes.get(
				"employeeDesignationId");

		if (employeeDesignationId != null) {
			setEmployeeDesignationId(employeeDesignationId);
		}

		Integer employeeDepartmentId = (Integer)attributes.get(
				"employeeDepartmentId");

		if (employeeDepartmentId != null) {
			setEmployeeDepartmentId(employeeDepartmentId);
		}

		Integer employeeSubDepartmentId = (Integer)attributes.get(
				"employeeSubDepartmentId");

		if (employeeSubDepartmentId != null) {
			setEmployeeSubDepartmentId(employeeSubDepartmentId);
		}

		Integer employeeTypeId = (Integer)attributes.get("employeeTypeId");

		if (employeeTypeId != null) {
			setEmployeeTypeId(employeeTypeId);
		}

		Integer employeeProofId = (Integer)attributes.get("employeeProofId");

		if (employeeProofId != null) {
			setEmployeeProofId(employeeProofId);
		}

		Integer createBy = (Integer)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getEmployeeMstId() {
		return _employeeMstId;
	}

	@Override
	public void setEmployeeMstId(long employeeMstId) {
		_employeeMstId = employeeMstId;
	}

	@JSON
	@Override
	public String getEmployeeId() {
		if (_employeeId == null) {
			return StringPool.BLANK;
		}
		else {
			return _employeeId;
		}
	}

	@Override
	public void setEmployeeId(String employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getGender() {
		return _gender;
	}

	@Override
	public void setGender(long gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public Date getJoiningDate() {
		return _joiningDate;
	}

	@Override
	public void setJoiningDate(Date joiningDate) {
		_joiningDate = joiningDate;
	}

	@JSON
	@Override
	public Date getLeavingDate() {
		return _leavingDate;
	}

	@Override
	public void setLeavingDate(Date leavingDate) {
		_leavingDate = leavingDate;
	}

	@JSON
	@Override
	public int getMaritualStatus() {
		return _maritualStatus;
	}

	@Override
	public void setMaritualStatus(int maritualStatus) {
		_maritualStatus = maritualStatus;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	@Override
	public int getEmployeeDesignationId() {
		return _employeeDesignationId;
	}

	@Override
	public void setEmployeeDesignationId(int employeeDesignationId) {
		_employeeDesignationId = employeeDesignationId;
	}

	@JSON
	@Override
	public int getEmployeeDepartmentId() {
		return _employeeDepartmentId;
	}

	@Override
	public void setEmployeeDepartmentId(int employeeDepartmentId) {
		_employeeDepartmentId = employeeDepartmentId;
	}

	@JSON
	@Override
	public int getEmployeeSubDepartmentId() {
		return _employeeSubDepartmentId;
	}

	@Override
	public void setEmployeeSubDepartmentId(int employeeSubDepartmentId) {
		_employeeSubDepartmentId = employeeSubDepartmentId;
	}

	@JSON
	@Override
	public int getEmployeeTypeId() {
		return _employeeTypeId;
	}

	@Override
	public void setEmployeeTypeId(int employeeTypeId) {
		_employeeTypeId = employeeTypeId;
	}

	@JSON
	@Override
	public int getEmployeeProofId() {
		return _employeeProofId;
	}

	@Override
	public void setEmployeeProofId(int employeeProofId) {
		_employeeProofId = employeeProofId;
	}

	@JSON
	@Override
	public int getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(int createBy) {
		_columnBitmask |= CREATEBY_COLUMN_BITMASK;

		if (!_setOriginalCreateBy) {
			_setOriginalCreateBy = true;

			_originalCreateBy = _createBy;
		}

		_createBy = createBy;
	}

	public int getOriginalCreateBy() {
		return _originalCreateBy;
	}

	@JSON
	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_columnBitmask |= MODIFIEDBY_COLUMN_BITMASK;

		if (!_setOriginalModifiedBy) {
			_setOriginalModifiedBy = true;

			_originalModifiedBy = _modifiedBy;
		}

		_modifiedBy = modifiedBy;
	}

	public int getOriginalModifiedBy() {
		return _originalModifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmployeeMst.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeMst toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeMst)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeMstImpl employeeMstImpl = new EmployeeMstImpl();

		employeeMstImpl.setEmployeeMstId(getEmployeeMstId());
		employeeMstImpl.setEmployeeId(getEmployeeId());
		employeeMstImpl.setUserId(getUserId());
		employeeMstImpl.setGender(getGender());
		employeeMstImpl.setDateOfBirth(getDateOfBirth());
		employeeMstImpl.setJoiningDate(getJoiningDate());
		employeeMstImpl.setLeavingDate(getLeavingDate());
		employeeMstImpl.setMaritualStatus(getMaritualStatus());
		employeeMstImpl.setNationality(getNationality());
		employeeMstImpl.setEmployeeDesignationId(getEmployeeDesignationId());
		employeeMstImpl.setEmployeeDepartmentId(getEmployeeDepartmentId());
		employeeMstImpl.setEmployeeSubDepartmentId(getEmployeeSubDepartmentId());
		employeeMstImpl.setEmployeeTypeId(getEmployeeTypeId());
		employeeMstImpl.setEmployeeProofId(getEmployeeProofId());
		employeeMstImpl.setCreateBy(getCreateBy());
		employeeMstImpl.setModifiedBy(getModifiedBy());

		employeeMstImpl.resetOriginalValues();

		return employeeMstImpl;
	}

	@Override
	public int compareTo(EmployeeMst employeeMst) {
		long primaryKey = employeeMst.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeMst)) {
			return false;
		}

		EmployeeMst employeeMst = (EmployeeMst)obj;

		long primaryKey = employeeMst.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmployeeMstModelImpl employeeMstModelImpl = this;

		employeeMstModelImpl._originalUserId = employeeMstModelImpl._userId;

		employeeMstModelImpl._setOriginalUserId = false;

		employeeMstModelImpl._originalCreateBy = employeeMstModelImpl._createBy;

		employeeMstModelImpl._setOriginalCreateBy = false;

		employeeMstModelImpl._originalModifiedBy = employeeMstModelImpl._modifiedBy;

		employeeMstModelImpl._setOriginalModifiedBy = false;

		employeeMstModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeMst> toCacheModel() {
		EmployeeMstCacheModel employeeMstCacheModel = new EmployeeMstCacheModel();

		employeeMstCacheModel.employeeMstId = getEmployeeMstId();

		employeeMstCacheModel.employeeId = getEmployeeId();

		String employeeId = employeeMstCacheModel.employeeId;

		if ((employeeId != null) && (employeeId.length() == 0)) {
			employeeMstCacheModel.employeeId = null;
		}

		employeeMstCacheModel.userId = getUserId();

		employeeMstCacheModel.gender = getGender();

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			employeeMstCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			employeeMstCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		Date joiningDate = getJoiningDate();

		if (joiningDate != null) {
			employeeMstCacheModel.joiningDate = joiningDate.getTime();
		}
		else {
			employeeMstCacheModel.joiningDate = Long.MIN_VALUE;
		}

		Date leavingDate = getLeavingDate();

		if (leavingDate != null) {
			employeeMstCacheModel.leavingDate = leavingDate.getTime();
		}
		else {
			employeeMstCacheModel.leavingDate = Long.MIN_VALUE;
		}

		employeeMstCacheModel.maritualStatus = getMaritualStatus();

		employeeMstCacheModel.nationality = getNationality();

		String nationality = employeeMstCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			employeeMstCacheModel.nationality = null;
		}

		employeeMstCacheModel.employeeDesignationId = getEmployeeDesignationId();

		employeeMstCacheModel.employeeDepartmentId = getEmployeeDepartmentId();

		employeeMstCacheModel.employeeSubDepartmentId = getEmployeeSubDepartmentId();

		employeeMstCacheModel.employeeTypeId = getEmployeeTypeId();

		employeeMstCacheModel.employeeProofId = getEmployeeProofId();

		employeeMstCacheModel.createBy = getCreateBy();

		employeeMstCacheModel.modifiedBy = getModifiedBy();

		return employeeMstCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{employeeMstId=");
		sb.append(getEmployeeMstId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append(", joiningDate=");
		sb.append(getJoiningDate());
		sb.append(", leavingDate=");
		sb.append(getLeavingDate());
		sb.append(", maritualStatus=");
		sb.append(getMaritualStatus());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", employeeDesignationId=");
		sb.append(getEmployeeDesignationId());
		sb.append(", employeeDepartmentId=");
		sb.append(getEmployeeDepartmentId());
		sb.append(", employeeSubDepartmentId=");
		sb.append(getEmployeeSubDepartmentId());
		sb.append(", employeeTypeId=");
		sb.append(getEmployeeTypeId());
		sb.append(", employeeProofId=");
		sb.append(getEmployeeProofId());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.EmployeeMst");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>employeeMstId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeMstId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>joiningDate</column-name><column-value><![CDATA[");
		sb.append(getJoiningDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leavingDate</column-name><column-value><![CDATA[");
		sb.append(getLeavingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritualStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritualStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDesignationId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDesignationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeSubDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeSubDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeTypeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeProofId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeProofId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmployeeMst.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeMst.class
		};
	private long _employeeMstId;
	private String _employeeId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _gender;
	private Date _dateOfBirth;
	private Date _joiningDate;
	private Date _leavingDate;
	private int _maritualStatus;
	private String _nationality;
	private int _employeeDesignationId;
	private int _employeeDepartmentId;
	private int _employeeSubDepartmentId;
	private int _employeeTypeId;
	private int _employeeProofId;
	private int _createBy;
	private int _originalCreateBy;
	private boolean _setOriginalCreateBy;
	private int _modifiedBy;
	private int _originalModifiedBy;
	private boolean _setOriginalModifiedBy;
	private long _columnBitmask;
	private EmployeeMst _escapedModel;
}