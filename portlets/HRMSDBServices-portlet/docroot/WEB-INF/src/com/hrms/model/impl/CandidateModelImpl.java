/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.Candidate;
import com.hrms.model.CandidateModel;
import com.hrms.model.CandidateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Candidate service. Represents a row in the &quot;HRMS_Candidate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.CandidateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateImpl}.
 * </p>
 *
 * @author bhavik
 * @see CandidateImpl
 * @see com.hrms.model.Candidate
 * @see com.hrms.model.CandidateModel
 * @generated
 */
@JSON(strict = true)
public class CandidateModelImpl extends BaseModelImpl<Candidate>
	implements CandidateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate model instance should use the {@link com.hrms.model.Candidate} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_Candidate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "candidateId", Types.BIGINT },
			{ "employeeDepartmentId", Types.BIGINT },
			{ "employeeSubDepartmentId", Types.BIGINT },
			{ "employeeDesignationId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "firstName", Types.VARCHAR },
			{ "middleName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "dateOfBirth", Types.TIMESTAMP },
			{ "nationality", Types.VARCHAR },
			{ "maritalStatus", Types.INTEGER },
			{ "street1", Types.VARCHAR },
			{ "street2", Types.VARCHAR },
			{ "street3", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "zip", Types.BIGINT },
			{ "countryId", Types.BIGINT },
			{ "personalEmail", Types.VARCHAR },
			{ "currentCtc", Types.BIGINT },
			{ "expectedCtc", Types.BIGINT },
			{ "noticePeriod", Types.VARCHAR },
			{ "resumeId", Types.BIGINT },
			{ "resumePath", Types.VARCHAR },
			{ "employeeProofId", Types.BIGINT },
			{ "proofNumber", Types.VARCHAR },
			{ "gender", Types.INTEGER },
			{ "status", Types.BOOLEAN },
			{ "shortListed", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "createBy", Types.BIGINT },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_Candidate (candidateId LONG not null primary key,employeeDepartmentId LONG,employeeSubDepartmentId LONG,employeeDesignationId LONG,title VARCHAR(75) null,firstName VARCHAR(75) null,middleName VARCHAR(75) null,lastName VARCHAR(75) null,dateOfBirth DATE null,nationality VARCHAR(75) null,maritalStatus INTEGER,street1 VARCHAR(75) null,street2 VARCHAR(75) null,street3 VARCHAR(75) null,city VARCHAR(75) null,zip LONG,countryId LONG,personalEmail VARCHAR(75) null,currentCtc LONG,expectedCtc LONG,noticePeriod VARCHAR(75) null,resumeId LONG,resumePath VARCHAR(75) null,employeeProofId LONG,proofNumber VARCHAR(75) null,gender INTEGER,status BOOLEAN,shortListed BOOLEAN,createDate DATE null,modifiedDate DATE null,createBy LONG,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_Candidate";
	public static final String ORDER_BY_JPQL = " ORDER BY candidate.candidateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_Candidate.candidateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.Candidate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.Candidate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Candidate toModel(CandidateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Candidate model = new CandidateImpl();

		model.setCandidateId(soapModel.getCandidateId());
		model.setEmployeeDepartmentId(soapModel.getEmployeeDepartmentId());
		model.setEmployeeSubDepartmentId(soapModel.getEmployeeSubDepartmentId());
		model.setEmployeeDesignationId(soapModel.getEmployeeDesignationId());
		model.setTitle(soapModel.getTitle());
		model.setFirstName(soapModel.getFirstName());
		model.setMiddleName(soapModel.getMiddleName());
		model.setLastName(soapModel.getLastName());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setNationality(soapModel.getNationality());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setStreet1(soapModel.getStreet1());
		model.setStreet2(soapModel.getStreet2());
		model.setStreet3(soapModel.getStreet3());
		model.setCity(soapModel.getCity());
		model.setZip(soapModel.getZip());
		model.setCountryId(soapModel.getCountryId());
		model.setPersonalEmail(soapModel.getPersonalEmail());
		model.setCurrentCtc(soapModel.getCurrentCtc());
		model.setExpectedCtc(soapModel.getExpectedCtc());
		model.setNoticePeriod(soapModel.getNoticePeriod());
		model.setResumeId(soapModel.getResumeId());
		model.setResumePath(soapModel.getResumePath());
		model.setEmployeeProofId(soapModel.getEmployeeProofId());
		model.setProofNumber(soapModel.getProofNumber());
		model.setGender(soapModel.getGender());
		model.setStatus(soapModel.getStatus());
		model.setShortListed(soapModel.getShortListed());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreateBy(soapModel.getCreateBy());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Candidate> toModels(CandidateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Candidate> models = new ArrayList<Candidate>(soapModels.length);

		for (CandidateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.Candidate"));

	public CandidateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Candidate.class;
	}

	@Override
	public String getModelClassName() {
		return Candidate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("candidateId", getCandidateId());
		attributes.put("employeeDepartmentId", getEmployeeDepartmentId());
		attributes.put("employeeSubDepartmentId", getEmployeeSubDepartmentId());
		attributes.put("employeeDesignationId", getEmployeeDesignationId());
		attributes.put("title", getTitle());
		attributes.put("firstName", getFirstName());
		attributes.put("middleName", getMiddleName());
		attributes.put("lastName", getLastName());
		attributes.put("dateOfBirth", getDateOfBirth());
		attributes.put("nationality", getNationality());
		attributes.put("maritalStatus", getMaritalStatus());
		attributes.put("street1", getStreet1());
		attributes.put("street2", getStreet2());
		attributes.put("street3", getStreet3());
		attributes.put("city", getCity());
		attributes.put("zip", getZip());
		attributes.put("countryId", getCountryId());
		attributes.put("personalEmail", getPersonalEmail());
		attributes.put("currentCtc", getCurrentCtc());
		attributes.put("expectedCtc", getExpectedCtc());
		attributes.put("noticePeriod", getNoticePeriod());
		attributes.put("resumeId", getResumeId());
		attributes.put("resumePath", getResumePath());
		attributes.put("employeeProofId", getEmployeeProofId());
		attributes.put("proofNumber", getProofNumber());
		attributes.put("gender", getGender());
		attributes.put("status", getStatus());
		attributes.put("shortListed", getShortListed());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createBy", getCreateBy());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long candidateId = (Long)attributes.get("candidateId");

		if (candidateId != null) {
			setCandidateId(candidateId);
		}

		Long employeeDepartmentId = (Long)attributes.get("employeeDepartmentId");

		if (employeeDepartmentId != null) {
			setEmployeeDepartmentId(employeeDepartmentId);
		}

		Long employeeSubDepartmentId = (Long)attributes.get(
				"employeeSubDepartmentId");

		if (employeeSubDepartmentId != null) {
			setEmployeeSubDepartmentId(employeeSubDepartmentId);
		}

		Long employeeDesignationId = (Long)attributes.get(
				"employeeDesignationId");

		if (employeeDesignationId != null) {
			setEmployeeDesignationId(employeeDesignationId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String middleName = (String)attributes.get("middleName");

		if (middleName != null) {
			setMiddleName(middleName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}

		String nationality = (String)attributes.get("nationality");

		if (nationality != null) {
			setNationality(nationality);
		}

		Integer maritalStatus = (Integer)attributes.get("maritalStatus");

		if (maritalStatus != null) {
			setMaritalStatus(maritalStatus);
		}

		String street1 = (String)attributes.get("street1");

		if (street1 != null) {
			setStreet1(street1);
		}

		String street2 = (String)attributes.get("street2");

		if (street2 != null) {
			setStreet2(street2);
		}

		String street3 = (String)attributes.get("street3");

		if (street3 != null) {
			setStreet3(street3);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		Long zip = (Long)attributes.get("zip");

		if (zip != null) {
			setZip(zip);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String personalEmail = (String)attributes.get("personalEmail");

		if (personalEmail != null) {
			setPersonalEmail(personalEmail);
		}

		Long currentCtc = (Long)attributes.get("currentCtc");

		if (currentCtc != null) {
			setCurrentCtc(currentCtc);
		}

		Long expectedCtc = (Long)attributes.get("expectedCtc");

		if (expectedCtc != null) {
			setExpectedCtc(expectedCtc);
		}

		String noticePeriod = (String)attributes.get("noticePeriod");

		if (noticePeriod != null) {
			setNoticePeriod(noticePeriod);
		}

		Long resumeId = (Long)attributes.get("resumeId");

		if (resumeId != null) {
			setResumeId(resumeId);
		}

		String resumePath = (String)attributes.get("resumePath");

		if (resumePath != null) {
			setResumePath(resumePath);
		}

		Long employeeProofId = (Long)attributes.get("employeeProofId");

		if (employeeProofId != null) {
			setEmployeeProofId(employeeProofId);
		}

		String proofNumber = (String)attributes.get("proofNumber");

		if (proofNumber != null) {
			setProofNumber(proofNumber);
		}

		Integer gender = (Integer)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Boolean shortListed = (Boolean)attributes.get("shortListed");

		if (shortListed != null) {
			setShortListed(shortListed);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		_candidateId = candidateId;
	}

	@JSON
	@Override
	public long getEmployeeDepartmentId() {
		return _employeeDepartmentId;
	}

	@Override
	public void setEmployeeDepartmentId(long employeeDepartmentId) {
		_employeeDepartmentId = employeeDepartmentId;
	}

	@JSON
	@Override
	public long getEmployeeSubDepartmentId() {
		return _employeeSubDepartmentId;
	}

	@Override
	public void setEmployeeSubDepartmentId(long employeeSubDepartmentId) {
		_employeeSubDepartmentId = employeeSubDepartmentId;
	}

	@JSON
	@Override
	public long getEmployeeDesignationId() {
		return _employeeDesignationId;
	}

	@Override
	public void setEmployeeDesignationId(long employeeDesignationId) {
		_employeeDesignationId = employeeDesignationId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		_middleName = middleName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	@Override
	public int getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(int maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getStreet1() {
		if (_street1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street1;
		}
	}

	@Override
	public void setStreet1(String street1) {
		_street1 = street1;
	}

	@JSON
	@Override
	public String getStreet2() {
		if (_street2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street2;
		}
	}

	@Override
	public void setStreet2(String street2) {
		_street2 = street2;
	}

	@JSON
	@Override
	public String getStreet3() {
		if (_street3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street3;
		}
	}

	@Override
	public void setStreet3(String street3) {
		_street3 = street3;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public long getZip() {
		return _zip;
	}

	@Override
	public void setZip(long zip) {
		_zip = zip;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@JSON
	@Override
	public String getPersonalEmail() {
		if (_personalEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _personalEmail;
		}
	}

	@Override
	public void setPersonalEmail(String personalEmail) {
		_personalEmail = personalEmail;
	}

	@JSON
	@Override
	public long getCurrentCtc() {
		return _currentCtc;
	}

	@Override
	public void setCurrentCtc(long currentCtc) {
		_currentCtc = currentCtc;
	}

	@JSON
	@Override
	public long getExpectedCtc() {
		return _expectedCtc;
	}

	@Override
	public void setExpectedCtc(long expectedCtc) {
		_expectedCtc = expectedCtc;
	}

	@JSON
	@Override
	public String getNoticePeriod() {
		if (_noticePeriod == null) {
			return StringPool.BLANK;
		}
		else {
			return _noticePeriod;
		}
	}

	@Override
	public void setNoticePeriod(String noticePeriod) {
		_noticePeriod = noticePeriod;
	}

	@JSON
	@Override
	public long getResumeId() {
		return _resumeId;
	}

	@Override
	public void setResumeId(long resumeId) {
		_resumeId = resumeId;
	}

	@JSON
	@Override
	public String getResumePath() {
		if (_resumePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _resumePath;
		}
	}

	@Override
	public void setResumePath(String resumePath) {
		_resumePath = resumePath;
	}

	@JSON
	@Override
	public long getEmployeeProofId() {
		return _employeeProofId;
	}

	@Override
	public void setEmployeeProofId(long employeeProofId) {
		_employeeProofId = employeeProofId;
	}

	@JSON
	@Override
	public String getProofNumber() {
		if (_proofNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _proofNumber;
		}
	}

	@Override
	public void setProofNumber(String proofNumber) {
		_proofNumber = proofNumber;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@JSON
	@Override
	public boolean getShortListed() {
		return _shortListed;
	}

	@Override
	public boolean isShortListed() {
		return _shortListed;
	}

	@Override
	public void setShortListed(boolean shortListed) {
		_shortListed = shortListed;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_createBy = createBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Candidate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Candidate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Candidate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateImpl candidateImpl = new CandidateImpl();

		candidateImpl.setCandidateId(getCandidateId());
		candidateImpl.setEmployeeDepartmentId(getEmployeeDepartmentId());
		candidateImpl.setEmployeeSubDepartmentId(getEmployeeSubDepartmentId());
		candidateImpl.setEmployeeDesignationId(getEmployeeDesignationId());
		candidateImpl.setTitle(getTitle());
		candidateImpl.setFirstName(getFirstName());
		candidateImpl.setMiddleName(getMiddleName());
		candidateImpl.setLastName(getLastName());
		candidateImpl.setDateOfBirth(getDateOfBirth());
		candidateImpl.setNationality(getNationality());
		candidateImpl.setMaritalStatus(getMaritalStatus());
		candidateImpl.setStreet1(getStreet1());
		candidateImpl.setStreet2(getStreet2());
		candidateImpl.setStreet3(getStreet3());
		candidateImpl.setCity(getCity());
		candidateImpl.setZip(getZip());
		candidateImpl.setCountryId(getCountryId());
		candidateImpl.setPersonalEmail(getPersonalEmail());
		candidateImpl.setCurrentCtc(getCurrentCtc());
		candidateImpl.setExpectedCtc(getExpectedCtc());
		candidateImpl.setNoticePeriod(getNoticePeriod());
		candidateImpl.setResumeId(getResumeId());
		candidateImpl.setResumePath(getResumePath());
		candidateImpl.setEmployeeProofId(getEmployeeProofId());
		candidateImpl.setProofNumber(getProofNumber());
		candidateImpl.setGender(getGender());
		candidateImpl.setStatus(getStatus());
		candidateImpl.setShortListed(getShortListed());
		candidateImpl.setCreateDate(getCreateDate());
		candidateImpl.setModifiedDate(getModifiedDate());
		candidateImpl.setCreateBy(getCreateBy());
		candidateImpl.setModifiedBy(getModifiedBy());

		candidateImpl.resetOriginalValues();

		return candidateImpl;
	}

	@Override
	public int compareTo(Candidate candidate) {
		long primaryKey = candidate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Candidate)) {
			return false;
		}

		Candidate candidate = (Candidate)obj;

		long primaryKey = candidate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Candidate> toCacheModel() {
		CandidateCacheModel candidateCacheModel = new CandidateCacheModel();

		candidateCacheModel.candidateId = getCandidateId();

		candidateCacheModel.employeeDepartmentId = getEmployeeDepartmentId();

		candidateCacheModel.employeeSubDepartmentId = getEmployeeSubDepartmentId();

		candidateCacheModel.employeeDesignationId = getEmployeeDesignationId();

		candidateCacheModel.title = getTitle();

		String title = candidateCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			candidateCacheModel.title = null;
		}

		candidateCacheModel.firstName = getFirstName();

		String firstName = candidateCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			candidateCacheModel.firstName = null;
		}

		candidateCacheModel.middleName = getMiddleName();

		String middleName = candidateCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			candidateCacheModel.middleName = null;
		}

		candidateCacheModel.lastName = getLastName();

		String lastName = candidateCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			candidateCacheModel.lastName = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			candidateCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			candidateCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		candidateCacheModel.nationality = getNationality();

		String nationality = candidateCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			candidateCacheModel.nationality = null;
		}

		candidateCacheModel.maritalStatus = getMaritalStatus();

		candidateCacheModel.street1 = getStreet1();

		String street1 = candidateCacheModel.street1;

		if ((street1 != null) && (street1.length() == 0)) {
			candidateCacheModel.street1 = null;
		}

		candidateCacheModel.street2 = getStreet2();

		String street2 = candidateCacheModel.street2;

		if ((street2 != null) && (street2.length() == 0)) {
			candidateCacheModel.street2 = null;
		}

		candidateCacheModel.street3 = getStreet3();

		String street3 = candidateCacheModel.street3;

		if ((street3 != null) && (street3.length() == 0)) {
			candidateCacheModel.street3 = null;
		}

		candidateCacheModel.city = getCity();

		String city = candidateCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			candidateCacheModel.city = null;
		}

		candidateCacheModel.zip = getZip();

		candidateCacheModel.countryId = getCountryId();

		candidateCacheModel.personalEmail = getPersonalEmail();

		String personalEmail = candidateCacheModel.personalEmail;

		if ((personalEmail != null) && (personalEmail.length() == 0)) {
			candidateCacheModel.personalEmail = null;
		}

		candidateCacheModel.currentCtc = getCurrentCtc();

		candidateCacheModel.expectedCtc = getExpectedCtc();

		candidateCacheModel.noticePeriod = getNoticePeriod();

		String noticePeriod = candidateCacheModel.noticePeriod;

		if ((noticePeriod != null) && (noticePeriod.length() == 0)) {
			candidateCacheModel.noticePeriod = null;
		}

		candidateCacheModel.resumeId = getResumeId();

		candidateCacheModel.resumePath = getResumePath();

		String resumePath = candidateCacheModel.resumePath;

		if ((resumePath != null) && (resumePath.length() == 0)) {
			candidateCacheModel.resumePath = null;
		}

		candidateCacheModel.employeeProofId = getEmployeeProofId();

		candidateCacheModel.proofNumber = getProofNumber();

		String proofNumber = candidateCacheModel.proofNumber;

		if ((proofNumber != null) && (proofNumber.length() == 0)) {
			candidateCacheModel.proofNumber = null;
		}

		candidateCacheModel.gender = getGender();

		candidateCacheModel.status = getStatus();

		candidateCacheModel.shortListed = getShortListed();

		Date createDate = getCreateDate();

		if (createDate != null) {
			candidateCacheModel.createDate = createDate.getTime();
		}
		else {
			candidateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			candidateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			candidateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		candidateCacheModel.createBy = getCreateBy();

		candidateCacheModel.modifiedBy = getModifiedBy();

		return candidateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{candidateId=");
		sb.append(getCandidateId());
		sb.append(", employeeDepartmentId=");
		sb.append(getEmployeeDepartmentId());
		sb.append(", employeeSubDepartmentId=");
		sb.append(getEmployeeSubDepartmentId());
		sb.append(", employeeDesignationId=");
		sb.append(getEmployeeDesignationId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", middleName=");
		sb.append(getMiddleName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", maritalStatus=");
		sb.append(getMaritalStatus());
		sb.append(", street1=");
		sb.append(getStreet1());
		sb.append(", street2=");
		sb.append(getStreet2());
		sb.append(", street3=");
		sb.append(getStreet3());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", zip=");
		sb.append(getZip());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", personalEmail=");
		sb.append(getPersonalEmail());
		sb.append(", currentCtc=");
		sb.append(getCurrentCtc());
		sb.append(", expectedCtc=");
		sb.append(getExpectedCtc());
		sb.append(", noticePeriod=");
		sb.append(getNoticePeriod());
		sb.append(", resumeId=");
		sb.append(getResumeId());
		sb.append(", resumePath=");
		sb.append(getResumePath());
		sb.append(", employeeProofId=");
		sb.append(getEmployeeProofId());
		sb.append(", proofNumber=");
		sb.append(getProofNumber());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", shortListed=");
		sb.append(getShortListed());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.Candidate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>candidateId</column-name><column-value><![CDATA[");
		sb.append(getCandidateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeSubDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeSubDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDesignationId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDesignationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>middleName</column-name><column-value><![CDATA[");
		sb.append(getMiddleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritalStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street1</column-name><column-value><![CDATA[");
		sb.append(getStreet1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street2</column-name><column-value><![CDATA[");
		sb.append(getStreet2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street3</column-name><column-value><![CDATA[");
		sb.append(getStreet3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zip</column-name><column-value><![CDATA[");
		sb.append(getZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personalEmail</column-name><column-value><![CDATA[");
		sb.append(getPersonalEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentCtc</column-name><column-value><![CDATA[");
		sb.append(getCurrentCtc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedCtc</column-name><column-value><![CDATA[");
		sb.append(getExpectedCtc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticePeriod</column-name><column-value><![CDATA[");
		sb.append(getNoticePeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resumeId</column-name><column-value><![CDATA[");
		sb.append(getResumeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resumePath</column-name><column-value><![CDATA[");
		sb.append(getResumePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeProofId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeProofId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proofNumber</column-name><column-value><![CDATA[");
		sb.append(getProofNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortListed</column-name><column-value><![CDATA[");
		sb.append(getShortListed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Candidate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Candidate.class
		};
	private long _candidateId;
	private long _employeeDepartmentId;
	private long _employeeSubDepartmentId;
	private long _employeeDesignationId;
	private String _title;
	private String _firstName;
	private String _middleName;
	private String _lastName;
	private Date _dateOfBirth;
	private String _nationality;
	private int _maritalStatus;
	private String _street1;
	private String _street2;
	private String _street3;
	private String _city;
	private long _zip;
	private long _countryId;
	private String _personalEmail;
	private long _currentCtc;
	private long _expectedCtc;
	private String _noticePeriod;
	private long _resumeId;
	private String _resumePath;
	private long _employeeProofId;
	private String _proofNumber;
	private int _gender;
	private boolean _status;
	private boolean _shortListed;
	private Date _createDate;
	private Date _modifiedDate;
	private long _createBy;
	private long _modifiedBy;
	private Candidate _escapedModel;
}