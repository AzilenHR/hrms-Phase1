/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.Offer;
import com.hrms.model.OfferModel;
import com.hrms.model.OfferSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Offer service. Represents a row in the &quot;HRMS_Offer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.OfferModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OfferImpl}.
 * </p>
 *
 * @author yashpalsinh
 * @see OfferImpl
 * @see com.hrms.model.Offer
 * @see com.hrms.model.OfferModel
 * @generated
 */
@JSON(strict = true)
public class OfferModelImpl extends BaseModelImpl<Offer> implements OfferModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a offer model instance should use the {@link com.hrms.model.Offer} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_Offer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "OfferId", Types.BIGINT },
			{ "candidateId", Types.BIGINT },
			{ "employeeDepartmentId", Types.BIGINT },
			{ "employeeSubDepartmentId", Types.BIGINT },
			{ "employeeDesignationId", Types.BIGINT },
			{ "employeeTypeId", Types.BIGINT },
			{ "salary", Types.BIGINT },
			{ "joiningDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "createBy", Types.BIGINT },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_Offer (OfferId LONG not null primary key,candidateId LONG,employeeDepartmentId LONG,employeeSubDepartmentId LONG,employeeDesignationId LONG,employeeTypeId LONG,salary LONG,joiningDate DATE null,createDate DATE null,modifiedDate DATE null,createBy LONG,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_Offer";
	public static final String ORDER_BY_JPQL = " ORDER BY offer.OfferId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_Offer.OfferId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.Offer"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.Offer"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Offer toModel(OfferSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Offer model = new OfferImpl();

		model.setOfferId(soapModel.getOfferId());
		model.setCandidateId(soapModel.getCandidateId());
		model.setEmployeeDepartmentId(soapModel.getEmployeeDepartmentId());
		model.setEmployeeSubDepartmentId(soapModel.getEmployeeSubDepartmentId());
		model.setEmployeeDesignationId(soapModel.getEmployeeDesignationId());
		model.setEmployeeTypeId(soapModel.getEmployeeTypeId());
		model.setSalary(soapModel.getSalary());
		model.setJoiningDate(soapModel.getJoiningDate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreateBy(soapModel.getCreateBy());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Offer> toModels(OfferSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Offer> models = new ArrayList<Offer>(soapModels.length);

		for (OfferSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.Offer"));

	public OfferModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _OfferId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOfferId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _OfferId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Offer.class;
	}

	@Override
	public String getModelClassName() {
		return Offer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("OfferId", getOfferId());
		attributes.put("candidateId", getCandidateId());
		attributes.put("employeeDepartmentId", getEmployeeDepartmentId());
		attributes.put("employeeSubDepartmentId", getEmployeeSubDepartmentId());
		attributes.put("employeeDesignationId", getEmployeeDesignationId());
		attributes.put("employeeTypeId", getEmployeeTypeId());
		attributes.put("salary", getSalary());
		attributes.put("joiningDate", getJoiningDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createBy", getCreateBy());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long OfferId = (Long)attributes.get("OfferId");

		if (OfferId != null) {
			setOfferId(OfferId);
		}

		Long candidateId = (Long)attributes.get("candidateId");

		if (candidateId != null) {
			setCandidateId(candidateId);
		}

		Long employeeDepartmentId = (Long)attributes.get("employeeDepartmentId");

		if (employeeDepartmentId != null) {
			setEmployeeDepartmentId(employeeDepartmentId);
		}

		Long employeeSubDepartmentId = (Long)attributes.get(
				"employeeSubDepartmentId");

		if (employeeSubDepartmentId != null) {
			setEmployeeSubDepartmentId(employeeSubDepartmentId);
		}

		Long employeeDesignationId = (Long)attributes.get(
				"employeeDesignationId");

		if (employeeDesignationId != null) {
			setEmployeeDesignationId(employeeDesignationId);
		}

		Long employeeTypeId = (Long)attributes.get("employeeTypeId");

		if (employeeTypeId != null) {
			setEmployeeTypeId(employeeTypeId);
		}

		Long salary = (Long)attributes.get("salary");

		if (salary != null) {
			setSalary(salary);
		}

		Date joiningDate = (Date)attributes.get("joiningDate");

		if (joiningDate != null) {
			setJoiningDate(joiningDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getOfferId() {
		return _OfferId;
	}

	@Override
	public void setOfferId(long OfferId) {
		_OfferId = OfferId;
	}

	@JSON
	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		_candidateId = candidateId;
	}

	@JSON
	@Override
	public long getEmployeeDepartmentId() {
		return _employeeDepartmentId;
	}

	@Override
	public void setEmployeeDepartmentId(long employeeDepartmentId) {
		_employeeDepartmentId = employeeDepartmentId;
	}

	@JSON
	@Override
	public long getEmployeeSubDepartmentId() {
		return _employeeSubDepartmentId;
	}

	@Override
	public void setEmployeeSubDepartmentId(long employeeSubDepartmentId) {
		_employeeSubDepartmentId = employeeSubDepartmentId;
	}

	@JSON
	@Override
	public long getEmployeeDesignationId() {
		return _employeeDesignationId;
	}

	@Override
	public void setEmployeeDesignationId(long employeeDesignationId) {
		_employeeDesignationId = employeeDesignationId;
	}

	@JSON
	@Override
	public long getEmployeeTypeId() {
		return _employeeTypeId;
	}

	@Override
	public void setEmployeeTypeId(long employeeTypeId) {
		_employeeTypeId = employeeTypeId;
	}

	@JSON
	@Override
	public long getSalary() {
		return _salary;
	}

	@Override
	public void setSalary(long salary) {
		_salary = salary;
	}

	@JSON
	@Override
	public Date getJoiningDate() {
		return _joiningDate;
	}

	@Override
	public void setJoiningDate(Date joiningDate) {
		_joiningDate = joiningDate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_createBy = createBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Offer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Offer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Offer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OfferImpl offerImpl = new OfferImpl();

		offerImpl.setOfferId(getOfferId());
		offerImpl.setCandidateId(getCandidateId());
		offerImpl.setEmployeeDepartmentId(getEmployeeDepartmentId());
		offerImpl.setEmployeeSubDepartmentId(getEmployeeSubDepartmentId());
		offerImpl.setEmployeeDesignationId(getEmployeeDesignationId());
		offerImpl.setEmployeeTypeId(getEmployeeTypeId());
		offerImpl.setSalary(getSalary());
		offerImpl.setJoiningDate(getJoiningDate());
		offerImpl.setCreateDate(getCreateDate());
		offerImpl.setModifiedDate(getModifiedDate());
		offerImpl.setCreateBy(getCreateBy());
		offerImpl.setModifiedBy(getModifiedBy());

		offerImpl.resetOriginalValues();

		return offerImpl;
	}

	@Override
	public int compareTo(Offer offer) {
		long primaryKey = offer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Offer)) {
			return false;
		}

		Offer offer = (Offer)obj;

		long primaryKey = offer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Offer> toCacheModel() {
		OfferCacheModel offerCacheModel = new OfferCacheModel();

		offerCacheModel.OfferId = getOfferId();

		offerCacheModel.candidateId = getCandidateId();

		offerCacheModel.employeeDepartmentId = getEmployeeDepartmentId();

		offerCacheModel.employeeSubDepartmentId = getEmployeeSubDepartmentId();

		offerCacheModel.employeeDesignationId = getEmployeeDesignationId();

		offerCacheModel.employeeTypeId = getEmployeeTypeId();

		offerCacheModel.salary = getSalary();

		Date joiningDate = getJoiningDate();

		if (joiningDate != null) {
			offerCacheModel.joiningDate = joiningDate.getTime();
		}
		else {
			offerCacheModel.joiningDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			offerCacheModel.createDate = createDate.getTime();
		}
		else {
			offerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			offerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			offerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		offerCacheModel.createBy = getCreateBy();

		offerCacheModel.modifiedBy = getModifiedBy();

		return offerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{OfferId=");
		sb.append(getOfferId());
		sb.append(", candidateId=");
		sb.append(getCandidateId());
		sb.append(", employeeDepartmentId=");
		sb.append(getEmployeeDepartmentId());
		sb.append(", employeeSubDepartmentId=");
		sb.append(getEmployeeSubDepartmentId());
		sb.append(", employeeDesignationId=");
		sb.append(getEmployeeDesignationId());
		sb.append(", employeeTypeId=");
		sb.append(getEmployeeTypeId());
		sb.append(", salary=");
		sb.append(getSalary());
		sb.append(", joiningDate=");
		sb.append(getJoiningDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.Offer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>OfferId</column-name><column-value><![CDATA[");
		sb.append(getOfferId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>candidateId</column-name><column-value><![CDATA[");
		sb.append(getCandidateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeSubDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeSubDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDesignationId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDesignationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeTypeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salary</column-name><column-value><![CDATA[");
		sb.append(getSalary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>joiningDate</column-name><column-value><![CDATA[");
		sb.append(getJoiningDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Offer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Offer.class };
	private long _OfferId;
	private long _candidateId;
	private long _employeeDepartmentId;
	private long _employeeSubDepartmentId;
	private long _employeeDesignationId;
	private long _employeeTypeId;
	private long _salary;
	private Date _joiningDate;
	private Date _createDate;
	private Date _modifiedDate;
	private long _createBy;
	private long _modifiedBy;
	private Offer _escapedModel;
}