/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.EmployeeMaster;
import com.hrms.model.EmployeeMasterModel;
import com.hrms.model.EmployeeMasterSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeMaster service. Represents a row in the &quot;HRMS_EmployeeMaster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.EmployeeMasterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeMasterImpl}.
 * </p>
 *
 * @author yashpalsinh
 * @see EmployeeMasterImpl
 * @see com.hrms.model.EmployeeMaster
 * @see com.hrms.model.EmployeeMasterModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeMasterModelImpl extends BaseModelImpl<EmployeeMaster>
	implements EmployeeMasterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee master model instance should use the {@link com.hrms.model.EmployeeMaster} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_EmployeeMaster";
	public static final Object[][] TABLE_COLUMNS = {
			{ "employeeMasterId", Types.BIGINT },
			{ "employeeId", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "gender", Types.INTEGER },
			{ "dateOfBirth", Types.TIMESTAMP },
			{ "joiningDate", Types.TIMESTAMP },
			{ "leavingDate", Types.TIMESTAMP },
			{ "maritalStatus", Types.INTEGER },
			{ "nationality", Types.VARCHAR },
			{ "employeeDesignationId", Types.INTEGER },
			{ "employeeDepartmentId", Types.INTEGER },
			{ "employeeSubDepartmentId", Types.INTEGER },
			{ "employeeTypeId", Types.INTEGER },
			{ "recruitedOnBasisOf", Types.VARCHAR },
			{ "recruitedBy", Types.BIGINT },
			{ "createBy", Types.INTEGER },
			{ "modifiedBy", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_EmployeeMaster (employeeMasterId LONG not null primary key,employeeId VARCHAR(75) null,userId LONG,gender INTEGER,dateOfBirth DATE null,joiningDate DATE null,leavingDate DATE null,maritalStatus INTEGER,nationality VARCHAR(75) null,employeeDesignationId INTEGER,employeeDepartmentId INTEGER,employeeSubDepartmentId INTEGER,employeeTypeId INTEGER,recruitedOnBasisOf VARCHAR(75) null,recruitedBy LONG,createBy INTEGER,modifiedBy INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_EmployeeMaster";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeMaster.employeeMasterId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_EmployeeMaster.employeeMasterId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.EmployeeMaster"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.EmployeeMaster"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.hrms.model.EmployeeMaster"),
			true);
	public static long CREATEBY_COLUMN_BITMASK = 1L;
	public static long MODIFIEDBY_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long EMPLOYEEMASTERID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeMaster toModel(EmployeeMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeMaster model = new EmployeeMasterImpl();

		model.setEmployeeMasterId(soapModel.getEmployeeMasterId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setUserId(soapModel.getUserId());
		model.setGender(soapModel.getGender());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setJoiningDate(soapModel.getJoiningDate());
		model.setLeavingDate(soapModel.getLeavingDate());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setNationality(soapModel.getNationality());
		model.setEmployeeDesignationId(soapModel.getEmployeeDesignationId());
		model.setEmployeeDepartmentId(soapModel.getEmployeeDepartmentId());
		model.setEmployeeSubDepartmentId(soapModel.getEmployeeSubDepartmentId());
		model.setEmployeeTypeId(soapModel.getEmployeeTypeId());
		model.setRecruitedOnBasisOf(soapModel.getRecruitedOnBasisOf());
		model.setRecruitedBy(soapModel.getRecruitedBy());
		model.setCreateBy(soapModel.getCreateBy());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeMaster> toModels(EmployeeMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeMaster> models = new ArrayList<EmployeeMaster>(soapModels.length);

		for (EmployeeMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.EmployeeMaster"));

	public EmployeeMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeMaster.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("employeeMasterId", getEmployeeMasterId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("userId", getUserId());
		attributes.put("gender", getGender());
		attributes.put("dateOfBirth", getDateOfBirth());
		attributes.put("joiningDate", getJoiningDate());
		attributes.put("leavingDate", getLeavingDate());
		attributes.put("maritalStatus", getMaritalStatus());
		attributes.put("nationality", getNationality());
		attributes.put("employeeDesignationId", getEmployeeDesignationId());
		attributes.put("employeeDepartmentId", getEmployeeDepartmentId());
		attributes.put("employeeSubDepartmentId", getEmployeeSubDepartmentId());
		attributes.put("employeeTypeId", getEmployeeTypeId());
		attributes.put("recruitedOnBasisOf", getRecruitedOnBasisOf());
		attributes.put("recruitedBy", getRecruitedBy());
		attributes.put("createBy", getCreateBy());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long employeeMasterId = (Long)attributes.get("employeeMasterId");

		if (employeeMasterId != null) {
			setEmployeeMasterId(employeeMasterId);
		}

		String employeeId = (String)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer gender = (Integer)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}

		Date joiningDate = (Date)attributes.get("joiningDate");

		if (joiningDate != null) {
			setJoiningDate(joiningDate);
		}

		Date leavingDate = (Date)attributes.get("leavingDate");

		if (leavingDate != null) {
			setLeavingDate(leavingDate);
		}

		Integer maritalStatus = (Integer)attributes.get("maritalStatus");

		if (maritalStatus != null) {
			setMaritalStatus(maritalStatus);
		}

		String nationality = (String)attributes.get("nationality");

		if (nationality != null) {
			setNationality(nationality);
		}

		Integer employeeDesignationId = (Integer)attributes.get(
				"employeeDesignationId");

		if (employeeDesignationId != null) {
			setEmployeeDesignationId(employeeDesignationId);
		}

		Integer employeeDepartmentId = (Integer)attributes.get(
				"employeeDepartmentId");

		if (employeeDepartmentId != null) {
			setEmployeeDepartmentId(employeeDepartmentId);
		}

		Integer employeeSubDepartmentId = (Integer)attributes.get(
				"employeeSubDepartmentId");

		if (employeeSubDepartmentId != null) {
			setEmployeeSubDepartmentId(employeeSubDepartmentId);
		}

		Integer employeeTypeId = (Integer)attributes.get("employeeTypeId");

		if (employeeTypeId != null) {
			setEmployeeTypeId(employeeTypeId);
		}

		String recruitedOnBasisOf = (String)attributes.get("recruitedOnBasisOf");

		if (recruitedOnBasisOf != null) {
			setRecruitedOnBasisOf(recruitedOnBasisOf);
		}

		Long recruitedBy = (Long)attributes.get("recruitedBy");

		if (recruitedBy != null) {
			setRecruitedBy(recruitedBy);
		}

		Integer createBy = (Integer)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Integer modifiedBy = (Integer)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getEmployeeMasterId() {
		return _employeeMasterId;
	}

	@Override
	public void setEmployeeMasterId(long employeeMasterId) {
		_employeeMasterId = employeeMasterId;
	}

	@JSON
	@Override
	public String getEmployeeId() {
		if (_employeeId == null) {
			return StringPool.BLANK;
		}
		else {
			return _employeeId;
		}
	}

	@Override
	public void setEmployeeId(String employeeId) {
		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public Date getJoiningDate() {
		return _joiningDate;
	}

	@Override
	public void setJoiningDate(Date joiningDate) {
		_joiningDate = joiningDate;
	}

	@JSON
	@Override
	public Date getLeavingDate() {
		return _leavingDate;
	}

	@Override
	public void setLeavingDate(Date leavingDate) {
		_leavingDate = leavingDate;
	}

	@JSON
	@Override
	public int getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(int maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	@Override
	public int getEmployeeDesignationId() {
		return _employeeDesignationId;
	}

	@Override
	public void setEmployeeDesignationId(int employeeDesignationId) {
		_employeeDesignationId = employeeDesignationId;
	}

	@JSON
	@Override
	public int getEmployeeDepartmentId() {
		return _employeeDepartmentId;
	}

	@Override
	public void setEmployeeDepartmentId(int employeeDepartmentId) {
		_employeeDepartmentId = employeeDepartmentId;
	}

	@JSON
	@Override
	public int getEmployeeSubDepartmentId() {
		return _employeeSubDepartmentId;
	}

	@Override
	public void setEmployeeSubDepartmentId(int employeeSubDepartmentId) {
		_employeeSubDepartmentId = employeeSubDepartmentId;
	}

	@JSON
	@Override
	public int getEmployeeTypeId() {
		return _employeeTypeId;
	}

	@Override
	public void setEmployeeTypeId(int employeeTypeId) {
		_employeeTypeId = employeeTypeId;
	}

	@JSON
	@Override
	public String getRecruitedOnBasisOf() {
		if (_recruitedOnBasisOf == null) {
			return StringPool.BLANK;
		}
		else {
			return _recruitedOnBasisOf;
		}
	}

	@Override
	public void setRecruitedOnBasisOf(String recruitedOnBasisOf) {
		_recruitedOnBasisOf = recruitedOnBasisOf;
	}

	@JSON
	@Override
	public long getRecruitedBy() {
		return _recruitedBy;
	}

	@Override
	public void setRecruitedBy(long recruitedBy) {
		_recruitedBy = recruitedBy;
	}

	@JSON
	@Override
	public int getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(int createBy) {
		_columnBitmask |= CREATEBY_COLUMN_BITMASK;

		if (!_setOriginalCreateBy) {
			_setOriginalCreateBy = true;

			_originalCreateBy = _createBy;
		}

		_createBy = createBy;
	}

	public int getOriginalCreateBy() {
		return _originalCreateBy;
	}

	@JSON
	@Override
	public int getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(int modifiedBy) {
		_columnBitmask |= MODIFIEDBY_COLUMN_BITMASK;

		if (!_setOriginalModifiedBy) {
			_setOriginalModifiedBy = true;

			_originalModifiedBy = _modifiedBy;
		}

		_modifiedBy = modifiedBy;
	}

	public int getOriginalModifiedBy() {
		return _originalModifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmployeeMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeMaster toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeMaster)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeMasterImpl employeeMasterImpl = new EmployeeMasterImpl();

		employeeMasterImpl.setEmployeeMasterId(getEmployeeMasterId());
		employeeMasterImpl.setEmployeeId(getEmployeeId());
		employeeMasterImpl.setUserId(getUserId());
		employeeMasterImpl.setGender(getGender());
		employeeMasterImpl.setDateOfBirth(getDateOfBirth());
		employeeMasterImpl.setJoiningDate(getJoiningDate());
		employeeMasterImpl.setLeavingDate(getLeavingDate());
		employeeMasterImpl.setMaritalStatus(getMaritalStatus());
		employeeMasterImpl.setNationality(getNationality());
		employeeMasterImpl.setEmployeeDesignationId(getEmployeeDesignationId());
		employeeMasterImpl.setEmployeeDepartmentId(getEmployeeDepartmentId());
		employeeMasterImpl.setEmployeeSubDepartmentId(getEmployeeSubDepartmentId());
		employeeMasterImpl.setEmployeeTypeId(getEmployeeTypeId());
		employeeMasterImpl.setRecruitedOnBasisOf(getRecruitedOnBasisOf());
		employeeMasterImpl.setRecruitedBy(getRecruitedBy());
		employeeMasterImpl.setCreateBy(getCreateBy());
		employeeMasterImpl.setModifiedBy(getModifiedBy());

		employeeMasterImpl.resetOriginalValues();

		return employeeMasterImpl;
	}

	@Override
	public int compareTo(EmployeeMaster employeeMaster) {
		long primaryKey = employeeMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeMaster)) {
			return false;
		}

		EmployeeMaster employeeMaster = (EmployeeMaster)obj;

		long primaryKey = employeeMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmployeeMasterModelImpl employeeMasterModelImpl = this;

		employeeMasterModelImpl._originalUserId = employeeMasterModelImpl._userId;

		employeeMasterModelImpl._setOriginalUserId = false;

		employeeMasterModelImpl._originalCreateBy = employeeMasterModelImpl._createBy;

		employeeMasterModelImpl._setOriginalCreateBy = false;

		employeeMasterModelImpl._originalModifiedBy = employeeMasterModelImpl._modifiedBy;

		employeeMasterModelImpl._setOriginalModifiedBy = false;

		employeeMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeMaster> toCacheModel() {
		EmployeeMasterCacheModel employeeMasterCacheModel = new EmployeeMasterCacheModel();

		employeeMasterCacheModel.employeeMasterId = getEmployeeMasterId();

		employeeMasterCacheModel.employeeId = getEmployeeId();

		String employeeId = employeeMasterCacheModel.employeeId;

		if ((employeeId != null) && (employeeId.length() == 0)) {
			employeeMasterCacheModel.employeeId = null;
		}

		employeeMasterCacheModel.userId = getUserId();

		employeeMasterCacheModel.gender = getGender();

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			employeeMasterCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			employeeMasterCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		Date joiningDate = getJoiningDate();

		if (joiningDate != null) {
			employeeMasterCacheModel.joiningDate = joiningDate.getTime();
		}
		else {
			employeeMasterCacheModel.joiningDate = Long.MIN_VALUE;
		}

		Date leavingDate = getLeavingDate();

		if (leavingDate != null) {
			employeeMasterCacheModel.leavingDate = leavingDate.getTime();
		}
		else {
			employeeMasterCacheModel.leavingDate = Long.MIN_VALUE;
		}

		employeeMasterCacheModel.maritalStatus = getMaritalStatus();

		employeeMasterCacheModel.nationality = getNationality();

		String nationality = employeeMasterCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			employeeMasterCacheModel.nationality = null;
		}

		employeeMasterCacheModel.employeeDesignationId = getEmployeeDesignationId();

		employeeMasterCacheModel.employeeDepartmentId = getEmployeeDepartmentId();

		employeeMasterCacheModel.employeeSubDepartmentId = getEmployeeSubDepartmentId();

		employeeMasterCacheModel.employeeTypeId = getEmployeeTypeId();

		employeeMasterCacheModel.recruitedOnBasisOf = getRecruitedOnBasisOf();

		String recruitedOnBasisOf = employeeMasterCacheModel.recruitedOnBasisOf;

		if ((recruitedOnBasisOf != null) && (recruitedOnBasisOf.length() == 0)) {
			employeeMasterCacheModel.recruitedOnBasisOf = null;
		}

		employeeMasterCacheModel.recruitedBy = getRecruitedBy();

		employeeMasterCacheModel.createBy = getCreateBy();

		employeeMasterCacheModel.modifiedBy = getModifiedBy();

		return employeeMasterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{employeeMasterId=");
		sb.append(getEmployeeMasterId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append(", joiningDate=");
		sb.append(getJoiningDate());
		sb.append(", leavingDate=");
		sb.append(getLeavingDate());
		sb.append(", maritalStatus=");
		sb.append(getMaritalStatus());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", employeeDesignationId=");
		sb.append(getEmployeeDesignationId());
		sb.append(", employeeDepartmentId=");
		sb.append(getEmployeeDepartmentId());
		sb.append(", employeeSubDepartmentId=");
		sb.append(getEmployeeSubDepartmentId());
		sb.append(", employeeTypeId=");
		sb.append(getEmployeeTypeId());
		sb.append(", recruitedOnBasisOf=");
		sb.append(getRecruitedOnBasisOf());
		sb.append(", recruitedBy=");
		sb.append(getRecruitedBy());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.EmployeeMaster");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>employeeMasterId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeMasterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>joiningDate</column-name><column-value><![CDATA[");
		sb.append(getJoiningDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leavingDate</column-name><column-value><![CDATA[");
		sb.append(getLeavingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritalStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDesignationId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDesignationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeSubDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeSubDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeTypeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recruitedOnBasisOf</column-name><column-value><![CDATA[");
		sb.append(getRecruitedOnBasisOf());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recruitedBy</column-name><column-value><![CDATA[");
		sb.append(getRecruitedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmployeeMaster.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeMaster.class
		};
	private long _employeeMasterId;
	private String _employeeId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private int _gender;
	private Date _dateOfBirth;
	private Date _joiningDate;
	private Date _leavingDate;
	private int _maritalStatus;
	private String _nationality;
	private int _employeeDesignationId;
	private int _employeeDepartmentId;
	private int _employeeSubDepartmentId;
	private int _employeeTypeId;
	private String _recruitedOnBasisOf;
	private long _recruitedBy;
	private int _createBy;
	private int _originalCreateBy;
	private boolean _setOriginalCreateBy;
	private int _modifiedBy;
	private int _originalModifiedBy;
	private boolean _setOriginalModifiedBy;
	private long _columnBitmask;
	private EmployeeMaster _escapedModel;
}