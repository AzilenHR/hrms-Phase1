/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.Todo;
import com.hrms.model.TodoModel;
import com.hrms.model.TodoSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Todo service. Represents a row in the &quot;HRMS_Todo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.TodoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TodoImpl}.
 * </p>
 *
 * @author bhavik
 * @see TodoImpl
 * @see com.hrms.model.Todo
 * @see com.hrms.model.TodoModel
 * @generated
 */
@JSON(strict = true)
public class TodoModelImpl extends BaseModelImpl<Todo> implements TodoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a todo model instance should use the {@link com.hrms.model.Todo} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_Todo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "taskId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "date_", Types.VARCHAR },
			{ "taskDetails", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_Todo (taskId LONG not null primary key,userId LONG,date_ VARCHAR(75) null,taskDetails VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_Todo";
	public static final String ORDER_BY_JPQL = " ORDER BY todo.taskId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_Todo.taskId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.Todo"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.Todo"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.hrms.model.Todo"), true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long TASKID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Todo toModel(TodoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Todo model = new TodoImpl();

		model.setTaskId(soapModel.getTaskId());
		model.setUserId(soapModel.getUserId());
		model.setDate(soapModel.getDate());
		model.setTaskDetails(soapModel.getTaskDetails());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Todo> toModels(TodoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Todo> models = new ArrayList<Todo>(soapModels.length);

		for (TodoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.Todo"));

	public TodoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Todo.class;
	}

	@Override
	public String getModelClassName() {
		return Todo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("taskId", getTaskId());
		attributes.put("userId", getUserId());
		attributes.put("date", getDate());
		attributes.put("taskDetails", getTaskDetails());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long taskId = (Long)attributes.get("taskId");

		if (taskId != null) {
			setTaskId(taskId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String date = (String)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		String taskDetails = (String)attributes.get("taskDetails");

		if (taskDetails != null) {
			setTaskDetails(taskDetails);
		}
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getDate() {
		if (_date == null) {
			return StringPool.BLANK;
		}
		else {
			return _date;
		}
	}

	@Override
	public void setDate(String date) {
		_date = date;
	}

	@JSON
	@Override
	public String getTaskDetails() {
		if (_taskDetails == null) {
			return StringPool.BLANK;
		}
		else {
			return _taskDetails;
		}
	}

	@Override
	public void setTaskDetails(String taskDetails) {
		_taskDetails = taskDetails;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Todo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Todo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Todo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TodoImpl todoImpl = new TodoImpl();

		todoImpl.setTaskId(getTaskId());
		todoImpl.setUserId(getUserId());
		todoImpl.setDate(getDate());
		todoImpl.setTaskDetails(getTaskDetails());

		todoImpl.resetOriginalValues();

		return todoImpl;
	}

	@Override
	public int compareTo(Todo todo) {
		long primaryKey = todo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Todo)) {
			return false;
		}

		Todo todo = (Todo)obj;

		long primaryKey = todo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TodoModelImpl todoModelImpl = this;

		todoModelImpl._originalUserId = todoModelImpl._userId;

		todoModelImpl._setOriginalUserId = false;

		todoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Todo> toCacheModel() {
		TodoCacheModel todoCacheModel = new TodoCacheModel();

		todoCacheModel.taskId = getTaskId();

		todoCacheModel.userId = getUserId();

		todoCacheModel.date = getDate();

		String date = todoCacheModel.date;

		if ((date != null) && (date.length() == 0)) {
			todoCacheModel.date = null;
		}

		todoCacheModel.taskDetails = getTaskDetails();

		String taskDetails = todoCacheModel.taskDetails;

		if ((taskDetails != null) && (taskDetails.length() == 0)) {
			todoCacheModel.taskDetails = null;
		}

		return todoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{taskId=");
		sb.append(getTaskId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", taskDetails=");
		sb.append(getTaskDetails());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.Todo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskDetails</column-name><column-value><![CDATA[");
		sb.append(getTaskDetails());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Todo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Todo.class };
	private long _taskId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _date;
	private String _taskDetails;
	private long _columnBitmask;
	private Todo _escapedModel;
}