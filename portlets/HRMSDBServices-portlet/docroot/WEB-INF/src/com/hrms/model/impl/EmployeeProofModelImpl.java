/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.EmployeeProof;
import com.hrms.model.EmployeeProofModel;
import com.hrms.model.EmployeeProofSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeProof service. Represents a row in the &quot;HRMS_EmployeeProof&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.EmployeeProofModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeProofImpl}.
 * </p>
 *
 * @author yashpalsinh
 * @see EmployeeProofImpl
 * @see com.hrms.model.EmployeeProof
 * @see com.hrms.model.EmployeeProofModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeProofModelImpl extends BaseModelImpl<EmployeeProof>
	implements EmployeeProofModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee proof model instance should use the {@link com.hrms.model.EmployeeProof} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_EmployeeProof";
	public static final Object[][] TABLE_COLUMNS = {
			{ "employeeProofId", Types.BIGINT },
			{ "proofType", Types.VARCHAR },
			{ "status", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_EmployeeProof (employeeProofId LONG not null primary key,proofType VARCHAR(75) null,status BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_EmployeeProof";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeProof.employeeProofId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_EmployeeProof.employeeProofId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.EmployeeProof"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.EmployeeProof"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeProof toModel(EmployeeProofSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeProof model = new EmployeeProofImpl();

		model.setEmployeeProofId(soapModel.getEmployeeProofId());
		model.setProofType(soapModel.getProofType());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeProof> toModels(EmployeeProofSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeProof> models = new ArrayList<EmployeeProof>(soapModels.length);

		for (EmployeeProofSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.EmployeeProof"));

	public EmployeeProofModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeProofId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeProofId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeProofId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeProof.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeProof.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("employeeProofId", getEmployeeProofId());
		attributes.put("proofType", getProofType());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long employeeProofId = (Long)attributes.get("employeeProofId");

		if (employeeProofId != null) {
			setEmployeeProofId(employeeProofId);
		}

		String proofType = (String)attributes.get("proofType");

		if (proofType != null) {
			setProofType(proofType);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getEmployeeProofId() {
		return _employeeProofId;
	}

	@Override
	public void setEmployeeProofId(long employeeProofId) {
		_employeeProofId = employeeProofId;
	}

	@JSON
	@Override
	public String getProofType() {
		if (_proofType == null) {
			return StringPool.BLANK;
		}
		else {
			return _proofType;
		}
	}

	@Override
	public void setProofType(String proofType) {
		_proofType = proofType;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmployeeProof.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeProof toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeProof)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeProofImpl employeeProofImpl = new EmployeeProofImpl();

		employeeProofImpl.setEmployeeProofId(getEmployeeProofId());
		employeeProofImpl.setProofType(getProofType());
		employeeProofImpl.setStatus(getStatus());

		employeeProofImpl.resetOriginalValues();

		return employeeProofImpl;
	}

	@Override
	public int compareTo(EmployeeProof employeeProof) {
		long primaryKey = employeeProof.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeProof)) {
			return false;
		}

		EmployeeProof employeeProof = (EmployeeProof)obj;

		long primaryKey = employeeProof.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EmployeeProof> toCacheModel() {
		EmployeeProofCacheModel employeeProofCacheModel = new EmployeeProofCacheModel();

		employeeProofCacheModel.employeeProofId = getEmployeeProofId();

		employeeProofCacheModel.proofType = getProofType();

		String proofType = employeeProofCacheModel.proofType;

		if ((proofType != null) && (proofType.length() == 0)) {
			employeeProofCacheModel.proofType = null;
		}

		employeeProofCacheModel.status = getStatus();

		return employeeProofCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{employeeProofId=");
		sb.append(getEmployeeProofId());
		sb.append(", proofType=");
		sb.append(getProofType());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.EmployeeProof");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>employeeProofId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeProofId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proofType</column-name><column-value><![CDATA[");
		sb.append(getProofType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmployeeProof.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeProof.class
		};
	private long _employeeProofId;
	private String _proofType;
	private boolean _status;
	private EmployeeProof _escapedModel;
}